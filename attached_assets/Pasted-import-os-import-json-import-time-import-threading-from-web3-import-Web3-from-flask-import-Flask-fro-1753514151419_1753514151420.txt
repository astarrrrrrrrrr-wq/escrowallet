import os
import json
import time
import threading
from web3 import Web3
from flask import Flask
from telegram.update import Update
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters


# === BOT & WALLET CONFIG ===
BOT_TOKEN = "7705638552:AAHN7YJ-8fB6l_CMp_L9tbZDfNMdpQj2Fc4"
ADMIN_USERNAMES = ["Indianarmy_1947", "Threethirty330"]
GROUP_ID = -1002830799357

ESCROW_WALLET = "0x5a2dD9bFe9cB39F6A1AD806747ce29718b1BfB70"
PRIVATE_KEY = "26ff32efb7b61a3602cc693b77f824427353f20dccbd4497f25322e3c53fdd4b"

# === POLYGON CONFIG ===
RPC_URL = "https://polygon-rpc.com"
USDT_CONTRACT = "0xc2132D05D31c914a87C6611C10748AaCB8fA48b6"
USDT_DECIMALS = 6
from flask import Flask
from web3 import Web3
from web3.middleware import geth_poa_middleware

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Flask + Web3 bot is online!"

# Web3 setup
RPC_URL = "https://polygon-rpc.com"
web3 = Web3(Web3.HTTPProvider(RPC_URL))
web3.middleware_onion.inject(geth_poa_middleware, layer=0)

print("Connected to Web3:", web3.is_connected())

# Run Flask server (for UptimeRobot, etc.)
app.run(host='0.0.0.0', port=8080)


abi = json.loads("""
[
    {
        "name": "balanceOf",
        "type": "function",
        "inputs": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view"
    },
    {
        "name": "transfer",
        "type": "function",
        "inputs": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable"
    }
]
""")

usdt = web3.eth.contract(
    address=Web3.to_checksum_address(USDT_CONTRACT),
    abi=abi
)
print(f"‚úÖ USDT Contract initialized at: {usdt.address}")

# === ESCROW DB ===
DB_FILE = "escrows.json"
if not os.path.exists(DB_FILE):
    with open(DB_FILE, "w") as f:
        json.dump({}, f)

def load_db():
    with open(DB_FILE, "r") as f:
        return json.load(f)

def save_db(data):
    with open(DB_FILE, "w") as f:
        json.dump(data, f, indent=2)

# === BLACKLIST DB ===
BLACKLIST_FILE = "blacklist.json"
if not os.path.exists(BLACKLIST_FILE):
    with open(BLACKLIST_FILE, "w") as f:
        json.dump([], f)

def load_blacklist():
    with open(BLACKLIST_FILE, "r") as f:
        return json.load(f)

def save_blacklist(data):
    with open(BLACKLIST_FILE, "w") as f:
        json.dump(data, f, indent=2)

# === TELEGRAM BOT ===
bot = Bot(BOT_TOKEN)
updater = Updater(BOT_TOKEN)
dispatcher = updater.dispatcher

def is_admin(user):
    return user.username in ADMIN_USERNAMES

def get_usdt_balance():
    try:
        checksum_address = Web3.to_checksum_address(ESCROW_WALLET)
        web3.eth.get_block('latest')  # Sync
        balance = usdt.functions.balanceOf(checksum_address).call({
            'from': checksum_address
        })
        print(f"‚úÖ Fetched raw USDT balance: {balance} (scaled: {balance / (10 ** USDT_DECIMALS)} USDT)")
        return balance / (10 ** USDT_DECIMALS)
    except Exception as e:
        print(f"‚ö†Ô∏è Error fetching balance: {e}")
        return 0

def start(update: Update, context: CallbackContext):
    update.message.reply_text("ü§ñ Escrow bot is online and ready!")

def deal(update: Update, context: CallbackContext):
    if update.effective_chat.id != GROUP_ID:
        return
    if len(context.args) != 4:
        update.message.reply_text("‚ùó Usage: /deal @buyer @seller SELLER_WALLET AMOUNT")
        return

    buyer, seller, seller_wallet, amount = context.args

    blacklist = load_blacklist()
    if buyer in blacklist or seller in blacklist:
        update.message.reply_text("üö´ One of the parties is blacklisted as a scammer. Deal rejected.")
        return

    try:
        amount = float(amount)
    except:
        update.message.reply_text("‚ùå Invalid amount format.")
        return

    tx_id = str(int(time.time()))
    db = load_db()
    db[tx_id] = {
        "buyer": buyer,
        "seller": seller,
        "seller_wallet": seller_wallet,
        "amount": amount,
        "status": "waiting_payment"
    }
    save_db(db)

    update.message.reply_text(
        f"ü§ù <b>Deal Started!</b>\n"
        f"üíº <b>Buyer:</b> {buyer}\n"
        f"üõí <b>Seller:</b> {seller}\n"
        f"üè∑Ô∏è <b>Amount:</b> {amount} USDT\n"
        f"üì¨ <b>Send USDT to Escrow Wallet:</b>\n<code>{ESCROW_WALLET}</code>\n\n"
        f"‚úÖ After sending, confirm with:\n<code>/confirm {tx_id}</code>",
        parse_mode='HTML'
    )

def confirm(update: Update, context: CallbackContext):
    if update.effective_chat.id != GROUP_ID:
        return
    if len(context.args) != 1:
        update.message.reply_text("Usage: /confirm TX_ID")
        return

    tx_id = context.args[0]
    db = load_db()
    tx = db.get(tx_id)
    if not tx:
        update.message.reply_text("‚ùå Invalid TX_ID.")
        return

    if tx["status"] != "paid":
        update.message.reply_text("‚è≥ Escrow not funded or already completed.")
        return

    try:
        amount = int(tx["amount"] * (10 ** USDT_DECIMALS))
        nonce = web3.eth.get_transaction_count(ESCROW_WALLET)
        txn = usdt.functions.transfer(
            Web3.to_checksum_address(tx["seller_wallet"]),
            amount
        ).build_transaction({
            'from': ESCROW_WALLET,
            'gas': 100000,
            'gasPrice': web3.to_wei('30', 'gwei'),
            'nonce': nonce
        })
        signed_txn = web3.eth.account.sign_transaction(txn, PRIVATE_KEY)
        tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        db[tx_id]["status"] = "released"
        save_db(db)
        update.message.reply_text(
            f"‚úÖ USDT released to {tx['seller']}!\nüîó Tx Hash: <code>{web3.to_hex(tx_hash)}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        update.message.reply_text(f"‚ùå Error releasing payment: {e}")

def dispute(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user):
        update.message.reply_text("üö´ Only admins can handle disputes.")
        return
    if len(context.args) != 2:
        update.message.reply_text("Usage: /dispute TX_ID REFUND_WALLET")
        return

    tx_id, refund_wallet = context.args
    db = load_db()
    tx = db.get(tx_id)
    if not tx:
        update.message.reply_text("‚ùå Invalid TX_ID.")
        return
    if tx["status"] != "paid":
        update.message.reply_text("‚ùå Escrow not in paid status.")
        return

    try:
        amount = int(tx["amount"] * (10 ** USDT_DECIMALS))
        nonce = web3.eth.get_transaction_count(ESCROW_WALLET)
        txn = usdt.functions.transfer(
            Web3.to_checksum_address(refund_wallet),
            amount
        ).build_transaction({
            'from': ESCROW_WALLET,
            'gas': 100000,
            'gasPrice': web3.to_wei('30', 'gwei'),
            'nonce': nonce
        })
        signed_txn = web3.eth.account.sign_transaction(txn, PRIVATE_KEY)
        tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
        db[tx_id]["status"] = "refunded"
        save_db(db)
        update.message.reply_text(
            f"üí∏ Refunded successfully.\nüîó Tx Hash: <code>{web3.to_hex(tx_hash)}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        update.message.reply_text(f"‚ùå Refund error: {e}")

def scammer(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user):
        update.message.reply_text("üö´ Only admins can mark scammers.")
        return
    if len(context.args) != 1:
        update.message.reply_text("Usage: /scammer @username")
        return
    user = context.args[0]
    blacklist = load_blacklist()
    if user not in blacklist:
        blacklist.append(user)
        save_blacklist(blacklist)
        update.message.reply_text(f"‚ö†Ô∏è {user} marked as a scammer. Escrow will not deal with them.")
    else:
        update.message.reply_text("Already blacklisted.")

def monitor_payments():
    last_balance = get_usdt_balance()
    while True:
        db = load_db()
        new_balance = get_usdt_balance()
        if new_balance > last_balance:
            diff = new_balance - last_balance
            for tx_id, tx in db.items():
                if tx["status"] == "waiting_payment" and tx["amount"] <= diff:
                    tx["status"] = "paid"
                    save_db(db)
                    bot.send_message(
                        chat_id=GROUP_ID,
                        text=f"üí∞ Payment of {tx['amount']} USDT received for TX_ID {tx_id}!\n"
                             f"{tx['seller']} may now proceed with delivery.\n"
                             f"{tx['buyer']}, confirm with /confirm {tx_id}"
                    )
                    break
            last_balance = new_balance
        time.sleep(30)  # Increased from 10 to 30 seconds

# === FLASK FOR REPLIT ===
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ Escrow bot running."

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# === SETUP ===
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("deal", deal))
dispatcher.add_handler(CommandHandler("confirm", confirm))
dispatcher.add_handler(CommandHandler("dispute", dispute))
dispatcher.add_handler(CommandHandler("scammer", scammer))

threading.Thread(target=monitor_payments).start()
threading.Thread(target=run_flask).start()
updater.start_polling()
print("ü§ñ Escrow bot is now running.")
